Collection API


1. List계열

1) Stack
=> Last In First Out(LIFO)
=> 나중에 들어간건 먼저 나온다
=> push()데이터삽입, pop()데이터삭제

2) ArrayList
=> 배열기반의 리스트
=> 가장 평범하게 사용을 많이한다.
=> 인덱스(순서 o), 값의 중복(o), 동적으로 크기를 조정함

3) LinkedList
=> 노드(객체) 기반의 리스트 (연결리스트)
=> 노드(객체) 주소값으로 참조해서 연결해놓은 구조
=> ArrayList의 사용방법은 동일함
=> ArrayList보다 삽입, 삭제는 빠름, 조회는 느림
=> 큐를 구현하고 있기 때문에, 큐처럼도 사용이 됩니다. (우선순위큐, 데큐를 대신해서 사용됨)


2. Queue계열
1) Queue
=> First In First Out(FIFO)
=> 먼저 들어간 건 먼저 나온다
=> 스케쥴링 작업에 사용됨
=> 자바에서는 Queue인터페이스를 구현한 PriorityQueue, Dequeue 등이 있습니다.
=> PriorityQueue 우선순위 큐, 삽입한 값을 자동으로 정렬해서 가지고 있습니다.
=> 문자열 비교 or 객체 비교를 하기 위해선 비교하는 메서드를 제공해야 됩니다.

2) Deque
=> 양방향 큐(양측에서 삽입과 삭제가 가능한 구조)
=> ArrayDeque라는 클래스를 사용해서 구현됨
=> Deque인터페이스를 상속받습니다.


3. Set계열
=> 데이터를 중복 없이 저장하는 자료구조 (중복x)
=> 기본적으로 해시알고리즘을 사용해서 저장 순서를 알 수 없습니다 (순서 x)
=> 저장 순서를 알수가 없기 때문에, 하나의 데이터를 조회하는 메서드가 없음.
=> 값의 확인은 반복자(iterator) 를 사용해서 확인함.
=> HashSet - 기본이 되는 Set을 구현한 클래스
=> TreeSet - 오름차순 정렬이 된 Set계열 클래스
=> LinkedHashSet - 순서도 가지고 있는 Set계열 클래스


4. Map계열
=> key와 value를 한꺼번에 저장하는 자료구조
=> 객체 생성시 멀티제네릭을 이용해서 key에 대한 타입, value에 대한 타입을 지정합니다.
=> key를 알고 있다면, 값을 빠르게 찾아내는 특징을 가집니다 (탐색 빠르다)
=> 프로그램에서 많이 사용되고, put(), get()가 중요합니다.

=> HashMap - 키가 HashSet으로 저장되는 형태
=> TreeMap - 키가 TreeSet으로 저장되는 형태
=> LinkedHashMap - 키가 LinkedHashSet으로 저장되는 형태













